which(portugais$G3 < 6)
portugais <- portugais[portugais$G3 >= 5, ]
which(portugais$G3 <6 )
which(portugais$G2 == 0)
which(portugais$G1 == 0)
#which(portugais$difference >= 6)
#portugais <- portugais[portugais$difference >= 6, ]
#Fin de l'élimination des 0 dans les données
##############################################
##############################################
mTravelTime <- mathematique$traveltime
pTravelTime <- portugais$traveltime
mStudyTime <- mathematique$studytime
pStudyTime <- portugais$studytime
mFailures <- mathematique$failures
pFailures <- portugais$failures
mSchoolSup <- mathematique$schoolsup
pSchoolSup <- portugais$schoolsup
mFamSup <- mathematique$famsup
pFamSup <- portugais$famsup
mPaid <- mathematique$paid
pPaid <- portugais$paid
mInternet <- mathematique$internet
pInternet <- portugais$internet
mFreeTime <- mathematique$freetime
pFreeTime <- portugais$freetime
mDalc <- mathematique$Dalc
PDalc <- portugais$Dalc
mWalc <- mathematique$Walc
pWalc <- portugais$Walc
mG3 <- mathematique$G3
pG3 <- portugais$G3
portugais$difference <- portugais$G3 - portugais$G1
portugais$difference
ggstatsplot::ggbetweenstats(
data = portugais, x = internet, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = portugais, x = Dalc, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = portugais, x = Walc, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
mathematique$difference <- mathematique$G3 - mathematique$G1
ggstatsplot::ggbetweenstats(
data = mathematique, x = traveltime, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = mathematique, x = studytime, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = mathematique, x = schoolsup, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = mathematique, x = famsup, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = mathematique, x = paid, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = mathematique, x = internet, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = mathematique, x = Dalc, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = mathematique, x = Walc, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
portugais$difference <- portugais$G3 - portugais$G1
ggstatsplot::ggbetweenstats(
data = portugais, x = traveltime, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = F,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = portugais, x = studytime, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = portugais, x = schoolsup, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = portugais, x = famsup, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = portugais, x = paid, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = portugais, x = internet, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = portugais, x = Dalc, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = portugais, x = Walc, y = difference,
title = "La note finale en mathématique en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
setwd("~/Trimestre Actuel/STT3200 - Synthèse/Stats-Syntese/Projet")
d1=read.table("student-mat.csv",sep=";",header=TRUE)
d2=read.table("student-por.csv",sep=";",header=TRUE)
d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
print(nrow(d3)) # 382 students
d1
d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
d1=read.table("student-mat.csv",sep=";",header=TRUE)
d2=read.table("student-por.csv",sep=";",header=TRUE)
d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
colnames(d1)
colnames(d2)
d1=read.table("student-mat.csv",sep=",",header=TRUE)
d2=read.table("student-por.csv",sep=",",header=TRUE)
colnames(d1)
colnames(d2)
d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
print(nrow(d3)) # 382 students
View(d3)
head(d3)
getwd()
write.csv(d3, file = "D:/Documents/Trimestre Actuel/STT3200 - Synthèse/Stats-Syntese/Projet/sudent-mat_por")
write.csv(d3, file = "D:/Documents/Trimestre Actuel/STT3200 - Synthèse/Stats-Syntese/Projet/sudent-mat_por.csv")
# Étape 1 : Relire le fichier CSV
d3_read <- read.csv("student-mat_por.csv" ,sep=",", header = TRUE)
# Étape 1 : Relire le fichier CSV
d3_read <- read.table("student-mat_por.csv" ,sep=",", header = TRUE)
setwd("~/Trimestre Actuel/STT3200 - Synthèse/Stats-Syntese/Projet")
# Étape 1 : Relire le fichier CSV
d3_read <- read.table("student-mat_por.csv" ,sep=",", header = TRUE)
# Étape 1 : Relire le fichier CSV
d3_read <- read.table("sudent-mat_por.csv" ,sep=",", header = TRUE)
# Étape 2 : Vérifier les dimensions
dim(d3_read)
dim(d3)
# Étape 3 : Inspecter les premières et dernières lignes
head(d3_read)
tail(d3_read)
# Étape 4 : Vérifier les noms des colonnes
colnames(d3_read)
colnames(d3)
View(d3_read)
write.csv(d3, file = "D:/Documents/Trimestre Actuel/STT3200 - Synthèse/Stats-Syntese/Projet/sudent-mat_por.csv", row.names = FALSE)
d1=read.table("student-mat.csv",sep=",",header=TRUE)
d2=read.table("student-por.csv",sep=",",header=TRUE)
d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
write.csv(d3, file = "D:/Documents/Trimestre Actuel/STT3200 - Synthèse/Stats-Syntese/Projet/sudent-mat_por.csv", row.names = FALSE)
# Étape 1 : Relire le fichier CSV
d3_read <- read.table("sudent-mat_por.csv" ,sep=",", header = TRUE)
# Étape 2 : Vérifier les dimensions
dim(d3_read)
dim(d3)
View(d3_read)
View(d3_read)
which(d1$g3 == 1)
which(d2$g3 == 1)
which(d1$g1 == 1)
which(d1$g2 == 1)
which(d2$g# == 1)
which(d2$g1 == 1)
which(d2$g1 == 1)
which(d2$g2 == 1)
which(d1$g3 <= 10)
d1$g3
d1$G3
which(d1$G3 == 10)
which(d2$G3 == 1)
which(d1$G3 == 1)
which(d2$G3 == 1)
which(d3_read$G3.x == 1)
which(d3_read$G3.y == 1)
d2$G3[173]
d2[173, ]
d3_read[239]
d2[173, ]
d3_read[239,]
setwd("~/Trimestre Actuel/STT3010 - Statistique Informatique/Stats_Infos/Devoir_3")
det_cov <-det(-cov)
set.seed(2024)
X <- readRDS("Devoir3_data.RDS")
#a)
lpost <- function(theta, sig2, nu, tau2) {
k <- 10
N <- sum(!is.na(X))
X_bar <- rowMeans(X, na.rm = TRUE)
ni <- rowSums(!is.na(X))
# Calcul de la log-densité a posteriori
logf <- - (N + 8) / 2 * log(sig2) - k / 2 * log(tau2) - 1/sig2 - nu^2/2 - tau2 -
1/(2*tau2) * sum((theta - nu)^2) -
1/(2*sig2) * sum(sapply(1:k, function(i) {
sum(X[i, ]^2, na.rm = TRUE) - 2 * ni[i] * X_bar[i] * theta[i] + ni[i] * theta[i]^2
}))
return(logf)
}
#b)
lpost_optim <- function(param) {
theta <- param[1:10]
sig2 <- param[11]
nu <- param[12]
tau2 <- param[13]
lpost(theta, sig2, nu, tau2)
}
# Paramètres initiaux
init_param <- c(rep(0, 10), 1, 0, 1)  # theta, sig2, nu, tau2
# Optimisation
opt <- optim(par = init_param, fn = lpost_optim, method = "BFGS",control=list(fnscale=-1), hessian = TRUE)
# Afficher les résultats
opt$value
theta_MAP <- opt$par#trouvé en b)
hess <- opt$hessian#trouvé en b)
cov <- solve(hess)#H^{-1}
det_cov <-det(-cov)
det_cov
#Fonction pour l'approximation de Laplace
Laplace <- function(theta){
d <- length(theta)
exponentielle <- exp(-0.5 * t(theta - theta_MAP) %*% solve(cov) %*% (theta - theta_MAP))
coeff <- 1 / ((2 * pi)^(d / 2) * sqrt(abs(det_cov)))
#la densité approximer de Laplace
densite <- coefficient * quadratic_form
return(densite)
}
theta_i <- rep(0:10)
theta_i
theta_i <- rep(NA,0:10)
theta_i <- rep(NA,10)
theta_i
?Laplace
for (i in 1:k) {
# Pour chaque theta_i, nous évaluons l'approximation de Laplace à ce point
theta_i[i] <- Laplace(theta_MAP[i])
}
k <- 10
lpost <- function(theta, sig2, nu, tau2) {
N <- sum(!is.na(X))
X_bar <- rowMeans(X, na.rm = TRUE)
ni <- rowSums(!is.na(X))
# Calcul de la log-densité a posteriori
logf <- - (N + 8) / 2 * log(sig2) - k / 2 * log(tau2) - 1/sig2 - nu^2/2 - tau2 -
1/(2*tau2) * sum((theta - nu)^2) -
1/(2*sig2) * sum(sapply(1:k, function(i) {
sum(X[i, ]^2, na.rm = TRUE) - 2 * ni[i] * X_bar[i] * theta[i] + ni[i] * theta[i]^2
}))
return(logf)
}
#b)
lpost_optim <- function(param) {
theta <- param[1:10]
sig2 <- param[11]
nu <- param[12]
tau2 <- param[13]
lpost(theta, sig2, nu, tau2)
}
# Paramètres initiaux
init_param <- c(rep(0, 10), 1, 0, 1)  # theta, sig2, nu, tau2
# Optimisation
opt <- optim(par = init_param, fn = lpost_optim, method = "BFGS",control=list(fnscale=-1), hessian = TRUE)
# Afficher les résultats
opt$value
k <- 10
lpost <- function(theta, sig2, nu, tau2) {
N <- sum(!is.na(X))
X_bar <- rowMeans(X, na.rm = TRUE)
ni <- rowSums(!is.na(X))
# Calcul de la log-densité a posteriori
logf <- - (N + 8) / 2 * log(sig2) - k / 2 * log(tau2) - 1/sig2 - nu^2/2 - tau2 -
1/(2*tau2) * sum((theta - nu)^2) -
1/(2*sig2) * sum(sapply(1:k, function(i) {
sum(X[i, ]^2, na.rm = TRUE) - 2 * ni[i] * X_bar[i] * theta[i] + ni[i] * theta[i]^2
}))
return(logf)
}
#b)
lpost_optim <- function(param) {
theta <- param[1:10]
sig2 <- param[11]
nu <- param[12]
tau2 <- param[13]
lpost(theta, sig2, nu, tau2)
}
# Paramètres initiaux
init_param <- c(rep(0, 10), 1, 0, 1)  # theta, sig2, nu, tau2
# Optimisation
opt <- optim(par = init_param, fn = lpost_optim, method = "BFGS",control=list(fnscale=-1), hessian = TRUE)
set.seed(2024)
X <- readRDS("Devoir3_data.RDS")
k <- 10
lpost <- function(theta, sig2, nu, tau2) {
N <- sum(!is.na(X))
X_bar <- rowMeans(X, na.rm = TRUE)
ni <- rowSums(!is.na(X))
# Calcul de la log-densité a posteriori
logf <- - (N + 8) / 2 * log(sig2) - k / 2 * log(tau2) - 1/sig2 - nu^2/2 - tau2 -
1/(2*tau2) * sum((theta - nu)^2) -
1/(2*sig2) * sum(sapply(1:k, function(i) {
sum(X[i, ]^2, na.rm = TRUE) - 2 * ni[i] * X_bar[i] * theta[i] + ni[i] * theta[i]^2
}))
return(logf)
}
#b)
lpost_optim <- function(param) {
theta <- param[1:10]
sig2 <- param[11]
nu <- param[12]
tau2 <- param[13]
lpost(theta, sig2, nu, tau2)
}
# Paramètres initiaux
init_param <- c(rep(0, 10), 1, 0, 1)  # theta, sig2, nu, tau2
# Optimisation
opt <- optim(par = init_param, fn = lpost_optim, method = "BFGS",control=list(fnscale=-1), hessian = TRUE)
# Afficher les résultats
opt$value
theta_MAP <- opt$par#trouvé en b)
hess <- opt$hessian#trouvé en b)
cov <- solve(hess)#H^{-1}
det_cov <-det(-cov)
#Fonction pour l'approximation de Laplace
Laplace <- function(theta){
d <- length(theta_MAP) - 3#exclure sig2, nu, tau2
exponentielle <- exp(-0.5 * t(theta - theta_MAP) %*% solve(cov) %*% (theta - theta_MAP))
coeff <- 1 / ((2 * pi)^(d / 2) * sqrt(abs(det_cov)))
#la densité approximer de Laplace
densite <- coefficient * quadratic_form
return(densite)
}
theta_i <- rep(NA,10)
for (i in 1:k) {
# Pour chaque theta_i, nous évaluons l'approximation de Laplace à ce point
theta_i[i] <- laplace_approx_density(theta_MAP[i])
}
for (i in 1:k) {
# Pour chaque theta_i, nous évaluons l'approximation de Laplace à ce point
theta_i[i] <- Laplace(theta_MAP[i])
}
#Fonction pour l'approximation de Laplace
Laplace <- function(theta){
d <- length(theta_MAP) - 3#exclure sig2, nu, tau2
exponentielle <- exp(-0.5 * t(theta - theta_MAP) %*% solve(cov) %*% (theta - theta_MAP))
coeff <- 1 / ((2 * pi)^(d / 2) * sqrt(abs(det_cov)))
#la densité approximer de Laplace
densite <- coeff * exponentielle
return(densite)
}
theta_i <- rep(NA,10)
for (i in 1:k) {
# Pour chaque theta_i, nous évaluons l'approximation de Laplace à ce point
theta_i[i] <- Laplace(theta_MAP[i])
}
theta_i[i]
for (i in 1:k) {
print(Laplace(theta_MAP[i]))
# Pour chaque theta_i, nous évaluons l'approximation de Laplace à ce point
theta_i[i] <- Laplace(theta_MAP[i])
}
for (i in 1:k) {
print(theta_MAP[i])
print(Laplace(theta_MAP[i]))
# Pour chaque theta_i, nous évaluons l'approximation de Laplace à ce point
theta_i[i] <- Laplace(theta_MAP[i])
}
moyenne_densite <- mean(theta_i)
moyenne_densite
set.seed(2024)
X <- readRDS("Devoir3_data.RDS")
#a)
k <- 10
lpost <- function(theta, sig2, nu, tau2) {
N <- sum(!is.na(X))
X_bar <- rowMeans(X, na.rm = TRUE)
ni <- rowSums(!is.na(X))
# Calcul de la log-densité a posteriori
logf <- - (N + 8) / 2 * log(sig2) - k / 2 * log(tau2) - 1/sig2 - nu^2/2 - tau2 -
1/(2*tau2) * sum((theta - nu)^2) -
1/(2*sig2) * sum(sapply(1:k, function(i) {
sum(X[i, ]^2, na.rm = TRUE) - 2 * ni[i] * X_bar[i] * theta[i] + ni[i] * theta[i]^2
}))
return(logf)
}
#b)
lpost_optim <- function(param) {
theta <- param[1:10]
sig2 <- param[11]
nu <- param[12]
tau2 <- param[13]
lpost(theta, sig2, nu, tau2)
}
# Paramètres initiaux
init_param <- c(rep(0, 10), 1, 0, 1)  # theta, sig2, nu, tau2
# Optimisation
opt <- optim(par = init_param, fn = lpost_optim, method = "BFGS",control=list(fnscale=-1), hessian = TRUE)
# Afficher les résultats
opt$value
#c)
theta_MAP <- opt$par#trouvé en b)
hess <- opt$hessian#trouvé en b)
#on trouve la matrice de covariance
cov <- solve(hess)#H^{-1}
det_cov <-det(-cov)
#Fonction pour l'approximation de Laplace
Laplace <- function(theta_i, i){
# i est l'index de theta_i dans theta_MAP
d <- length(theta_MAP) - 3  # Exclure sig2, nu, tau2
theta_diff <- theta_MAP
theta_diff[i] <- theta_i - theta_MAP[i]
quadratic_form <- -0.5 * t(theta_diff) %*% solve(cov) %*% theta_diff
exponentielle <- exp(quadratic_form)
coeff <- 1 / ((2 * pi)^(d / 2) * sqrt(abs(det_cov)))
# La densité approximée de Laplace pour le theta_i donné
densite <- coeff * exponentielle
return(densite)
}
theta_i <- rep(NA,10)
#On calul la densité des theta_i
for (i in 1:k) {
# Affiche la valeur actuelle de theta_MAP[i] pour le débogage
print(theta_MAP[i])
# Appelle la fonction Laplace pour la densité a posteriori de theta_i
densite <- Laplace(theta_MAP[i], i)
# Affiche la densité retournée pour le débogage
print(densite)
# Stocke la densité dans le vecteur theta_i
theta_i[i] <- densite
}
