getwd()
setwd("~/Desktop/Link to R - Cours/Stats_Infos/Cours1")
# Une matrice est initialis?e ? l'aide de la fonction matrix(), qui accepte trois arguments:
# un long vecteur qui contient toutes les entr?es list?es par colonne, le nombre de ligne puis le nombre de colonnes
mat <- matrix(1:9, nrow=3, ncol=3)
mat
# Ses ?l?ments sont index?s par deux indices (plut?t qu'un comme les vecteurs)
mat[1,1]
mat[2,3]
# Une ligne (resp. colonne) peut ?tre extraite sous forme de vecteur,
# en ne sp?cifiant pas le num?ro de colonne (resp. ligne)
mat[2,]
mat[,2]
# Les matrices (et vecteurs) sont transpos? ? l'aide de la fonction t()
t(vect)
t(mat)
# Un tableau (ou tenseur) g?n?ralise les matrices en permettant un nombre arbitraire d'indices
tabl <- array(1:180, dim=c(3, 4, 3, 5))
tabl
# Une boucle for ex?cute s?quentiellement un code d?pendant d'une variable, pour plusieurs valeurs de cette variable
for(i in c(2, 3, 5)){
print(i + 1)
}
x <- 0
for(i in 1:10){
x <- x+i
}
x
# Ce qui suit if(condition) est ex?cut? seulement si la condition est satisfaite
# La condition est typiquement une comparaison de type x (<, <=, ==, >=, >) y
x <- 0
if(x < 2) x <- x + 1
x
if(x < 2) x <- x + 1
x
if(x < 2) x <- x + 1
x
# Une fonction est un object qui peut ?tre assign? ? une variable, au m?me titre qu'une variable/vecteur
fn <- function(x) 2*x^3
fn
fn(2)
# Une fonction peut ?tre appliqu?e ? tous les ?l?ments d'un vecteur (ou d'une matrice)
# Attention ? fournir en entr?e un vecteur, et non plusieurs nombres!
fn(1, 3)
# Une fonction est un object qui peut ?tre assign? ? une variable, au m?me titre qu'une variable/vecteur
fn <- function(x) 2*x^3
fn
fn(2)
# Une fonction peut ?tre appliqu?e ? tous les ?l?ments d'un vecteur (ou d'une matrice)
# Attention ? fournir en entr?e un vecteur, et non plusieurs nombres!
fn(1, 3)
fn(c(1, 3))
# fonction générale qui accepte en entrée paramétres a, b, m, et un germe x0,
# et produit un nombre pseudoaléatoire selon un générateur congruentiel linéaire
generateur_CL <- function(a,b,x0,m){
y <- (a*x0 +b) %% m
return(y)
}
a <- 1; b=2; m = 16; x0 = 0
a
generateur_CL(a,b,x0,m)
for(i in 1:10){
(x <- generateur_CL(a,b,x,m))
}
for(i in 1:10){
x <- generateur_CL(a,b,x,m)
x
}
for(i in 1:10){
x <- generateur_CL(a,b,x,m)
print(x)
}
x <- rep(NA, 10)
x[1] <- x0
x
y <- rep(NA, 10)
y <- rep(NA, 10)
x <- rep(NA, 10)
x[1] <- x0
for(i in 1:10){
y <- x[i]
x[i+1]  <- generateur_CL(a,b,y,m)
}
y
y
y <- rep(NA, 10)
y <- rep(NA, 10)
y
y <- rep(NA, 10)
x <- rep(NA, 10)
x[1] <- x0
for(i in 1:10){
y <- x[i]
x[i+1]  <- generateur_CL(a,b,y,m)
}
y
x <- rep(NA, 10)
x[1] <- x0
for(i in 1:10){
x[i+1]  <- generateur_CL(a,b,x[i],m)
}
x
x[1] <- x0
#exemple page 17
a <- 5; b=1; m = 16; x0 = 0
x <- rep(NA, 16)
x[1] <- x0
for(in in 1:16){
for(i in 1:16){
x[i+1] <- generateur_CL(a,b,x,m)
}
x
warnings()
#exemple page 16
a <- 1; b=2; m = 16; x0 = 0
x <- rep(NA, 10)
x[1] <- x0
for(i in 1:m){
x[i+1]  <- generateur_CL(a,b,x[i],m)
}
x
#exemple page 17
a <- 5; b=1; m = 16; x0 = 0
x <- rep(NA, 16)
x[1] <- x0
for(i in 1:m){
x[i+1] <- generateur_CL(a,b,x,m)
}
x
for(i in 1:m){
print(x[i])
x[i+1] <- generateur_CL(a,b,x,m)
}
print(a)
for(i in 1:m){
print(a)
x[i+1] <- generateur_CL(a,b,x,m)
}
for(i in 1:m){
print(b)
x[i+1] <- generateur_CL(a,b,x,m)
}
for(i in 1:m){
print(m)
x[i+1] <- generateur_CL(a,b,x,m)
}
for(i in 1:m){
print(x)
x[i+1] <- generateur_CL(a,b,x,m)
}
for(i in 1:m){
print(i)
x[i+1] <- generateur_CL(a,b,x,m)
}
for(i in 1:m){
x[i+1] <- generateur_CL(a,b,x[i],m)
}
x
