setwd("C:/Users/kf891141/Desktop/Stats_Infos/Cours9")
#Page 3
# exemple: Poisson-Gamm
# hyperparamètres et observation
a <- 3
b <- 3
data_obs <- c(3, 3)
#Page 3
# X|\lambda suit Pois(\lambda), \lambda ~ Gamma(3,3). Donc \lambda|X ~ Gamma(3+X, 4)
# exemple: Poisson-Gamm
# hyperparamètres et observation
a <- 3
b <- 3
data_obs <- 3
# hyperparamètres et observation
a <- 3
b <- 3
data_obs <- 3
#data_obs <- c(3,3)
# densité a posteriori exacte
post <- function(lambda) dgamma(lambda, shape=a+sum(data_obs), rate=b+length(data_obs))
plot(post, 0, 5, xlab="lambda", ylab="f(lambda | X)")
c(1,2,3)==c(0,2,3)
# fonction qui échantillonne à partir de la loi a posteriori par ABC
# accepte en entrée: nombre m d'observations à simuler et vecteur data_obs qui correspond a un échantillon observé de valeurs de X,
ABC_PoisGamm <- function(m, data_obs){
ech <- rep(NA, m)
for(i in 1:m){
#page 7
accept <- FALSE
while(!accept){
# génération d'un paramètre candidat lambda
lambda <- rgamma(1, shape=a, rate=b)
# génération d'un nouvel échantillon (x_1, ..., x_n) étant donné les paramètres simulés
sample_size <- length(data_obs)
data_simul <- rpois(sample_size, lambda)
# comparaison de l'échantillon simulé avec l'échantillon observé
if(max(abs(sort(data_simul) - sort(data_obs))) == 0) accept <- TRUE
}
ech[i] <- lambda
}
return(ech)
}
1e3
m <- 1e3
ech <- ABC_PoisGamm(m, data_obs)
hist(ech, xlim=c(0, 5))
#data_obs <- 3
#data_obs <- c(3,3)
data_obs <- c(3,4,6)
# densité a posteriori exacte
post <- function(lambda) dgamma(lambda, shape=a+sum(data_obs), rate=b+length(data_obs))
plot(post, 0, 5, xlab="lambda", ylab="f(lambda | X)")
# fonction qui échantillonne à partir de la loi a posteriori par ABC
# accepte en entrée: nombre m d'observations à simuler et vecteur data_obs qui correspond a un échantillon observé de valeurs de X,
ABC_PoisGamm <- function(m, data_obs){
ech <- rep(NA, m)
for(i in 1:m){
#page 7
accept <- FALSE
while(!accept){
# génération d'un paramètre candidat lambda
lambda <- rgamma(1, shape=a, rate=b)
# génération d'un nouvel échantillon (x_1, ..., x_n) étant donné les paramètres simulés
sample_size <- length(data_obs)
data_simul <- rpois(sample_size, lambda)
# comparaison de l'échantillon simulé avec l'échantillon observé
if(max(abs(sort(data_simul) - sort(data_obs))) == 0) accept <- TRUE
}
ech[i] <- lambda
}
return(ech)
}
m <- 1e3
ech <- ABC_PoisGamm(m, data_obs)
hist(ech, xlim=c(0, 5))
#f(x|\theta_1, \theta_2, p) = p*N(\theta_1, 1) + (1-p)*N(\tehta_2,1)
#\theta_1 ~ N(0,100), \theta2 ~ N(0,100), p ~ U(0,1/2)
# modèle de mélange
# dimension 1, sigma_1 = sigma_2 = 1, nu_1 = nu_2 = 0, lambda_1 = lambda_2 = 10
prior_1 <- function(u1) dnorm(u1, mean=0, sd=10)
prior_2 <- function(u2) dnorm(u2, mean=0, sd=10)
prior_p <- function(p) dunif(p, min=0, max=.5)
densite <- function(x, u1, u2, p) p*dnorm(x, mean=u1, sd=1) + (1-p)*dnorm(x, mean=u2, sd=1)
# génération de l'échantillon
n <- 3
#n <- 12
data_obs <- c(rnorm(n/3, mean=-1, sd=1), rnorm(2*n/3, mean=1, sd=1))
data_obs
# calcul de la densité a posteriori (non-normalisée)
post <- function(u1, u2, p) prior_1(u1) * prior_2(u2) * prior_p(p) *
prod(sapply(data_obs, function(x) densite(x, u1, u2, p)))
# densité a posteriori conditionnelle d'un paramètre avec les deux autres fixés à des valeurs plausibles
ptp <- seq(-2, 2, length.out=1000)
plot(ptp, sapply(ptp, function(u1) post(u1, 1, .33)), type="l", xlab="u1", ylab="densité a posteriori")
plot(ptp, sapply(ptp, function(u2) post(-1, u2, .33)), type="l", xlab="u2", ylab="densité a posteriori")
ptp <- seq(0, .5, length.out=100)
plot(ptp, sapply(ptp, function(p) post(-1, 1, p)), type="l", xlab="p", ylab="densité a posteriori")
# fonction qui échantillonne à partir de la loi a posteriori par ABC
# accepte en entrée: nombre m d'observations à simuler, vecteur data_obs qui correspond a un échantillon observé de valeurs de X,
# mesure de distance rho entre les échantillons et seuil d'acceptation eps
ABC_melange <- function(m, data_obs, rho, eps){
ech <- matrix(rep(NA, 3*m), nrow=m)
for(i in 1:m){
accept <- FALSE
while(!accept){
# génération d'un paramètre candidat (theta_1, theta_2, p)
theta_1 <- rnorm(1, mean=0, sd=10)#on ne touche pas à ses sd là
theta_2 <- rnorm(1, mean=0, sd=10)
p <- runif(1, min=0, max=.5)
# génération d'un nouvel échantillon (x_1, ..., x_n) étant donné les paramètres simulés
sample_size <- length(data_obs)
data_simul <- rep(NA, sample_size)
for(j in 1:sample_size){
u <- runif(1)
if(u <= p) data_simul[j] <- rnorm(1, mean=theta_1, sd=1)#centré en theta_1, On corrige les sd=10 à sd=1
else data_simul[j] <- rnorm(1, mean=theta_2, sd=1)
}
# comparaison de l'échantillon simulé avec l'échantillon observé
if(rho(data_simul, data_obs) <= eps) accept <- TRUE
}
ech[i,] <- c(theta_1, theta_2, p)
}
return(ech)
}
m <- 1
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
m <- 1
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
m <- 1
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
m <- 1
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
m <- 1
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
m <- 1
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
m <- 1
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
m <- 1
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
m <- 1
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
m <- 1
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
m <- 1
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
m <- 1
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
m <- 1
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
m <- 1
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
m <- 30
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
# génération de l'échantillon
n <- 30
#n <- 12
data_obs <- c(rnorm(n/3, mean=-1, sd=1), rnorm(2*n/3, mean=1, sd=1))#n/3 centré au premier mode, 2n/3 centré au 2e mode
data_obs
# calcul de la densité a posteriori (non-normalisée)
post <- function(u1, u2, p) prior_1(u1) * prior_2(u2) * prior_p(p) *
prod(sapply(data_obs, function(x) densite(x, u1, u2, p)))
# densité a posteriori conditionnelle d'un paramètre avec les deux autres fixés à des valeurs plausibles
ptp <- seq(-2, 2, length.out=1000)
plot(ptp, sapply(ptp, function(u1) post(u1, 1, .33)), type="l", xlab="u1", ylab="densité a posteriori")
plot(ptp, sapply(ptp, function(u2) post(-1, u2, .33)), type="l", xlab="u2", ylab="densité a posteriori")
ptp <- seq(0, .5, length.out=100)
plot(ptp, sapply(ptp, function(p) post(-1, 1, p)), type="l", xlab="p", ylab="densité a posteriori")
# fonction qui échantillonne à partir de la loi a posteriori par ABC
# accepte en entrée: nombre m d'observations à simuler, vecteur data_obs qui correspond a un échantillon observé de valeurs de X,
# mesure de distance rho entre les échantillons et seuil d'acceptation eps
ABC_melange <- function(m, data_obs, rho, eps){
ech <- matrix(rep(NA, 3*m), nrow=m)
for(i in 1:m){
accept <- FALSE
while(!accept){
# génération d'un paramètre candidat (theta_1, theta_2, p)
theta_1 <- rnorm(1, mean=0, sd=10)#on ne touche pas à ses sd là
theta_2 <- rnorm(1, mean=0, sd=10)
p <- runif(1, min=0, max=.5)
# génération d'un nouvel échantillon (x_1, ..., x_n) étant donné les paramètres simulés
sample_size <- length(data_obs)
data_simul <- rep(NA, sample_size)
for(j in 1:sample_size){
u <- runif(1)
if(u <= p) data_simul[j] <- rnorm(1, mean=theta_1, sd=1)#centré en theta_1, On corrige les sd=10 à sd=1
else data_simul[j] <- rnorm(1, mean=theta_2, sd=1)
}
# comparaison de l'échantillon simulé avec l'échantillon observé
if(rho(data_simul, data_obs) <= eps) accept <- TRUE
}
ech[i,] <- c(theta_1, theta_2, p)
}
return(ech)
}
m <- 30
# expérience avec rho la distance euclidienne entre les échantillons triés
rho <- function(x, y) sqrt(sum((sort(x) - sort(y))^2))
eps <- 1
ech <- ABC_melange(m, data_obs, rho, eps)
ech
hist(ech[,1])
hist(ech[,3])
hist(ech[,1])
