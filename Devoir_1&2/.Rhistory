summary(contrast_2_3_vs_1, test = "Wilks")
# Création d'un nouveau jeu de données si les groupes 2 et 3 ne sont pas significativement différents
# Ceci est un exemple, vous devez vérifier les p-valeurs pour prendre la décision
if (summary(contrast_2_vs_3, test = "Wilks")$p.value["Group", "Pr(>F)"] > 0.05) {
new_data <- donnees[donnees$Group %in% c(2, 3), ]
}
donnees <- read.table("T8_3_FOOTBALL.DAT", header = FALSE, sep = "")
colnames(donnees) <- c("Group","WDIM","CIRCUM","FBEYE","EYEHD","EARHD","JAW")
donnees$Group <- as.factor(donnees$Group)
contrast_2_vs_3 <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ Group, data = donnees, subset = Group %in% c(2, 3))
summary(contrast_2_vs_3, test = "Wilks")
donnees$GroupCombined <- as.factor(ifelse(donnees$Group == 1, "1", "2_3"))
contrast_2_3_vs_1 <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ GroupCombined, data = donnees)
summary(contrast_2_3_vs_1, test = "Wilks")
if (summary(contrast_2_vs_3, test = "Wilks")$p.value["Group", "Pr(>F)"] > 0.05) {
new_data <- donnees[donnees$Group %in% c(2, 3), ]
}
if (summary(contrast_2_vs_3, test = "Wilks")$p.value["Group", "Pr(>F)"] > 0.05) {
new_data <- donnees[donnees$Group %in% c(2, 3), ]
}
if (summary_res$'Wilks'["Group", "Pr(>F)"] > 0.05) {
new_data <- donnees[donnees$Group %in% c(2, 3), ]
}
summary_res <- summary(contrast_2_vs_3, test = "Wilks")
if (summary_res$'Wilks'["Group", "Pr(>F)"] > 0.05) {
new_data <- donnees[donnees$Group %in% c(2, 3), ]
}
contrast_2_vs_3 <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ Group, data = donnee, subset = Group %in% c(2, 3))
summary(contrast_2_vs_3, test = "Wilks")
library(MASS)
library(ggplot2)
donnee <- read.table("T8_3_FOOTBALL.DAT", header = TRUE, fill = TRUE)
head(donnee)
names(donnee) <- c("Group", "WDIM", "CIRCUM", "FBEYE", "EYEHD", "EARHD", "JAW")
donnee
manova_result <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ Group, data = donnee)
summary(manova_result, test = "Wilks")
donnee$Group <- as.factor(donnee$Group)
ggplot(donnee, aes(x = WDIM, y = CIRCUM, colour = Group)) +
geom_point()
Vh <- length(levels(as.factor(donnee$Group))) - 1
manova.res <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ Group, data = donnee)
manov.output <- summary(manova.res, test = "Wilks")
manov.output
H <- manov.output$SS$Group
E <- manov.output$SS$Residuals
H
E
Specdec <- eigen(solve(E) %*% H)
Specdec
a1 <- Specdec$vectors[,1]
a2 <- Specdec$vectors[,2]
a1
a2
donnee$z1 <- a1[1]*donnee[,2] + a1[2]*donnee[,3] + a1[3]*donnee[,4] +
a1[4]*donnee[,5] + a1[5]*donnee[,6] + a1[6]*donnee[,7]
donnee$z2 <- a2[1]*donnee[,2] + a2[2]*donnee[,3] + a2[3]*donnee[,4] +
a2[4]*donnee[,5] + a2[5]*donnee[,6] + a2[6]*donnee[,7]
donnee$z1
donnee$z2
ggplot(donnee, aes(x = z1, y = z2, colour = Group)) +
geom_point()
impo.disc <- numeric(Vh)
for (j in 1:Vh) {
impo.disc[j] <- Specdec$values[j] / sum(Specdec$values[1:Vh])
}
print(impo.disc)
L.y.nonpara <- function(y.bar, S.y, y.vec) {
L.i <- t(y.bar) %*% solve(S.y) %*% y.vec - 0.5 * t(y.bar) %*% solve(S.y) %*% y.bar
return(as.numeric(L.i))
}
sub.class <- function(df) {
g.class <- numeric(nrow(df))
n1 <- nrow(df[df$Group==1,])
n2 <- nrow(df[df$Group==2,])
n3 <- nrow(df[df$Group==3,])
N <- n1 + n2 + n3
k <- length(unique(df$Group))
y1.bar.df <- colMeans(df[df$Group==1,-1])
y2.bar.df <- colMeans(df[df$Group==2,-1])
y3.bar.df <- colMeans(df[df$Group==3,-1])
S1.y.df <- cov(df[df$Group==1,-1])
S2.y.df <- cov(df[df$Group==2,-1])
S3.y.df <- cov(df[df$Group==3,-1])
Sc.df <- (1/(N - k)) * ((n1 - 1) * S1.y.df + (n2 - 1) * S2.y.df + (n3 - 1) * S3.y.df)
for (j in 1:nrow(df)) {
y <- as.numeric(df[j, -1])
scores <- c(L.y.nonpara(y1.bar.df, Sc.df, y),
L.y.nonpara(y2.bar.df, Sc.df, y),
L.y.nonpara(y3.bar.df, Sc.df, y))
g.class[j] <- which.max(scores)
}
return(g.class)
}
g.class <- sub.class(donnee)
donnee$GroupCombined <- as.factor(ifelse(donnee$Group == 1, "1", "2_3"))
contrast_2_3_vs_1 <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ GroupCombined, data = donnee)
summary(contrast_2_3_vs_1, test = "Wilks")
summary_res <- summary(contrast_2_vs_3, test = "Wilks")
y.bar <- as.numeric(colMeans(donnee))
library(MASS)
library(ggplot2)
donnee <- read.table("T8_3_FOOTBALL.DAT", header = TRUE, fill = TRUE)
head(donnee)
names(donnee) <- c("Group", "WDIM", "CIRCUM", "FBEYE", "EYEHD", "EARHD", "JAW")
donnee
manova_result <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ Group, data = donnee)
summary(manova_result, test = "Wilks")
donnee$Group <- as.factor(donnee$Group)
ggplot(donnee, aes(x = WDIM, y = CIRCUM, colour = Group)) +
geom_point()
Vh <- length(levels(as.factor(donnee$Group))) - 1
manova.res <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ Group, data = donnee)
manov.output <- summary(manova.res, test = "Wilks")
manov.output
H <- manov.output$SS$Group
E <- manov.output$SS$Residuals
H
E
Specdec <- eigen(solve(E) %*% H)
Specdec
a1 <- Specdec$vectors[,1]
a2 <- Specdec$vectors[,2]
a1
a2
donnee$z1 <- a1[1]*donnee[,2] + a1[2]*donnee[,3] + a1[3]*donnee[,4] +
a1[4]*donnee[,5] + a1[5]*donnee[,6] + a1[6]*donnee[,7]
donnee$z2 <- a2[1]*donnee[,2] + a2[2]*donnee[,3] + a2[3]*donnee[,4] +
a2[4]*donnee[,5] + a2[5]*donnee[,6] + a2[6]*donnee[,7]
donnee$z1
donnee$z2
ggplot(donnee, aes(x = z1, y = z2, colour = Group)) +
geom_point()
impo.disc <- numeric(Vh)
for (j in 1:Vh) {
impo.disc[j] <- Specdec$values[j] / sum(Specdec$values[1:Vh])
}
print(impo.disc)
L.y.nonpara <- function(y.bar, S.y, y.vec) {
L.i <- t(y.bar) %*% solve(S.y) %*% y.vec - 0.5 * t(y.bar) %*% solve(S.y) %*% y.bar
return(as.numeric(L.i))
}
sub.class <- function(df) {
g.class <- numeric(nrow(df))
n1 <- nrow(df[df$Group==1,])
n2 <- nrow(df[df$Group==2,])
n3 <- nrow(df[df$Group==3,])
N <- n1 + n2 + n3
k <- length(unique(df$Group))
y1.bar.df <- colMeans(df[df$Group==1,-1])
y2.bar.df <- colMeans(df[df$Group==2,-1])
y3.bar.df <- colMeans(df[df$Group==3,-1])
S1.y.df <- cov(df[df$Group==1,-1])
S2.y.df <- cov(df[df$Group==2,-1])
S3.y.df <- cov(df[df$Group==3,-1])
Sc.df <- (1/(N - k)) * ((n1 - 1) * S1.y.df + (n2 - 1) * S2.y.df + (n3 - 1) * S3.y.df)
for (j in 1:nrow(df)) {
y <- as.numeric(df[j, -1])
scores <- c(L.y.nonpara(y1.bar.df, Sc.df, y),
L.y.nonpara(y2.bar.df, Sc.df, y),
L.y.nonpara(y3.bar.df, Sc.df, y))
g.class[j] <- which.max(scores)
}
return(g.class)
}
g.class <- sub.class(donnee)
contrast_2_vs_3 <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ Group, data = donnee, subset = Group %in% c(2, 3))
summary(contrast_2_vs_3, test = "Wilks")
donnee$GroupCombined <- as.factor(ifelse(donnee$Group == 1, "1", "2_3"))
contrast_2_3_vs_1 <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ GroupCombined, data = donnee)
summary(contrast_2_3_vs_1, test = "Wilks")
summary_res <- summary(contrast_2_vs_3, test = "Wilks")
if (summary_res$'Wilks'["Group", "Pr(>F)"] > 0.05) {
new_data <- donnee[donnee$Group %in% c(2, 3), ]
}
summary_res <- summary(contrast_2_vs_3, test = "Wilks")
p_value <- summary_res$"Pr(>F)"[1, 1]
if (!is.null(p_value) && p_value > 0.05) {
new_data <- donnee[donnee$Group %in% c(2, 3), ]
}
summary_res <- summary(contrast_2_vs_3, test = "Wilks")
p_value <- summary_res$"Pr(>F)"[1, 1]
if (!is.null(p_value) && p_value > 0.05) {
nouvelle-donnee <- donnee[donnee$Group %in% c(2, 3), ]
}
summary_res <- summary(contrast_2_vs_3, test = "Wilks")
p_value <- summary_res$"Pr(>F)"[1, 1]
if (!is.null(p_value) && p_value > 0.05) {
nouvelle_donnee <- donnee[donnee$Group %in% c(2, 3), ]
}
nouvelle_donnee
summary_res <- summary(contrast_2_vs_3, test = "Wilks")
p_value <- summary_res$"Pr(>F)"[1, 1]
if (!is.null(p_value) && p_value > 0.05) {
nouvelle_donnee <- donnee[donnee$Group %in% c(2, 3), ]
}
summary_res <- summary(contrast_2_vs_3, test = "Wilks")
p_value <- summary_res$"Pr(>F)"[1, 1]
if (!is.null(p_value) && p_value > 0.05) {
nouvelle_donnee <- donnee[donnee$Group %in% c(2, 3), ]
}
nouvelle_donnee
summary_res <- summary(contrast_2_vs_3, test = "Wilks")
p_value <- summary_res$"Pr(>F)"[1, 1]
if (!is.null(p_value) && p_value > 0.05) {
nouvelle_donnee <- donnee[donnee$Group %in% c(2, 3), ]
}
nouvelle_donnee
summary_res <- summary(contrast_2_vs_3, test = "Wilks")
p_value <- summary_res$"Pr(>F)"[1, 1]
print(p_value)
if (!is.null(p_value) && p_value > 0.05) {
nouvelle_donnee <- donnee[donnee$Group %in% c(2, 3), ]
}
summary_res <- summary(contrast_2_vs_3, test = "Wilks")
str(summary_res)
p_value <- summary_res$'Wilks'["Pr(>F)"]
#p_value <- summary_res$"Pr(>F)"[1, 1]
print(p_value)
if (!is.null(p_value) && p_value > 0.05) {
new_data <- donnee[donnee$Group %in% c(2, 3), ]
} else {
print("Les groupes sont significativement différents, ou la p-value n'est pas accessible.")
}
summary_res <- summary(contrast_2_vs_3, test = "Wilks")
str(summary_res)
p_value <- summary_res$'Wilks'["Pr(>F)"]
#p_value <- summary_res$"Pr(>F)"[1, 1]
print(p_value)
if (!is.null(p_value) && p_value > 0.05) {
nouvelle_donnee <- donnee[donnee$Group %in% c(2, 3), ]
}
nouvelle_donnee <- donnee[donnee$Group %in% c(2, 3), ]
nouvelle_donnee <- donnee[donnee$Group %in% c(2, 3), ]
nouvelle_donnee
y.bar <- as.numeric(colMeans(donnee))
y.bar <- as.numeric(colMeans(nouvelle_donnee))
donnees_numeriques <- nouvelle_donnee[sapply(nouvelle_donnee, is.numeric)]
y.bar <- as.numeric(colMeans(nouvelle_donnee))
donnees_numeriques <- nouvelle_donnee[sapply(nouvelle_donnee, is.numeric)]
y.bar <- as.numeric(colMeans(nouvelle_donnee))
donnees_numeriques <- nouvelle_donnee[sapply(nouvelle_donnee, is.numeric)]
y.bar <- as.numeric(colMeans(donnees_numeriques))
S.y <- as.matrix(cov(donnees_numeriques))
SpecDec.S <- eigen(S.y)
a1 <- SpecDec.S$vectors[, 1]
a2 <- SpecDec.S$vectors[, 2]
SpecDec.S <- eigen(S.y)
a1 <- SpecDec.S$vectors[, 1]
a2 <- SpecDec.S$vectors[, 2]
a1
a2
donnees_numeriques$z1 <- a1[1] * (new_data$Var1 - y.bar[1]) + a1[2] * (new_data$Var2 - y.bar[2])
donnees_numeriques$z1 <- a1[1] * (donnees_numeriques$Var1 - y.bar[1]) + a1[2] * (new_data$Var2 - y.bar[2])
donnees_numeriques$z1 <- a1[1] * (donnees_numeriques$Var1 - y.bar[1]) + a1[2] * (donnees_numeriques$Var2 - y.bar[2])
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ggplot2)
donnee <- read.table("T8_3_FOOTBALL.DAT", header = TRUE, fill = TRUE)
donnee <- read.table("T8_3_FOOTBALL.DAT", header = TRUE, fill = TRUE)
head(donnee)
names(donnee) <- c("Group", "WDIM", "CIRCUM", "FBEYE", "EYEHD", "EARHD", "JAW")
donnee
manova_result <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ Group, data = donnee)
summary(manova_result, test = "Wilks")
donnee$Group <- as.factor(donnee$Group)
ggplot(donnee, aes(x = WDIM, y = CIRCUM, colour = Group)) +
geom_point()
Vh <- length(levels(as.factor(donnee$Group))) - 1
manova.res <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ Group, data = donnee)
manov.output <- summary(manova.res, test = "Wilks")
manov.output
H <- manov.output$SS$Group
E <- manov.output$SS$Residuals
H
E
a1 <- Specdec$vectors[,1]
a2 <- Specdec$vectors[,2]
a1
a2
donnee$z1 <- a1[1]*donnee[,2] + a1[2]*donnee[,3] + a1[3]*donnee[,4] +
a1[4]*donnee[,5] + a1[5]*donnee[,6] + a1[6]*donnee[,7]
donnee$z2 <- a2[1]*donnee[,2] + a2[2]*donnee[,3] + a2[3]*donnee[,4] +
a2[4]*donnee[,5] + a2[5]*donnee[,6] + a2[6]*donnee[,7]
donnee$z1
donnee$z2
impo.disc <- numeric(Vh)
for (j in 1:Vh) {
impo.disc[j] <- Specdec$values[j] / sum(Specdec$values[1:Vh])
}
print(impo.disc)
L.y.nonpara <- function(y.bar, S.y, y.vec) {
L.i <- t(y.bar) %*% solve(S.y) %*% y.vec - 0.5 * t(y.bar) %*% solve(S.y) %*% y.bar
return(as.numeric(L.i))
}
sub.class <- function(df) {
g.class <- numeric(nrow(df))
n1 <- nrow(df[df$Group==1,])
n2 <- nrow(df[df$Group==2,])
n3 <- nrow(df[df$Group==3,])
N <- n1 + n2 + n3
k <- length(unique(df$Group))
y1.bar.df <- colMeans(df[df$Group==1,-1])
y2.bar.df <- colMeans(df[df$Group==2,-1])
y3.bar.df <- colMeans(df[df$Group==3,-1])
S1.y.df <- cov(df[df$Group==1,-1])
S2.y.df <- cov(df[df$Group==2,-1])
S3.y.df <- cov(df[df$Group==3,-1])
Sc.df <- (1/(N - k)) * ((n1 - 1) * S1.y.df + (n2 - 1) * S2.y.df + (n3 - 1) * S3.y.df)
for (j in 1:nrow(df)) {
y <- as.numeric(df[j, -1])
scores <- c(L.y.nonpara(y1.bar.df, Sc.df, y),
L.y.nonpara(y2.bar.df, Sc.df, y),
L.y.nonpara(y3.bar.df, Sc.df, y))
g.class[j] <- which.max(scores)
}
return(g.class)
}
err.part.vec <- err.func.part(donnee, B = 100)
contrast_2_vs_3 <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ Group, data = donnee, subset = Group %in% c(2, 3))
summary(contrast_2_vs_3, test = "Wilks")
donnee$GroupCombined <- as.factor(ifelse(donnee$Group == 1, "1", "2_3"))
contrast_2_3_vs_1 <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ GroupCombined, data = donnee)
summary(contrast_2_3_vs_1, test = "Wilks")
nouvelle_donnee <- donnee[donnee$Group %in% c(2, 3), ]
nouvelle_donnee
donnees_numeriques <- nouvelle_donnee[sapply(nouvelle_donnee, is.numeric)]
y.bar <- as.numeric(colMeans(donnees_numeriques))
S.y <- as.matrix(cov(donnees_numeriques))
SpecDec.S <- eigen(S.y)
a1 <- SpecDec.S$vectors[, 1]
a2 <- SpecDec.S$vectors[, 2]
a1
a2
donnees_numeriques$z1 <- a1[1] * (donnees_numeriques$Var1 - y.bar[1]) + a1[2] * (donnees_numeriques$Var2 - y.bar[2])
g.class <- sub.class(donnee)
L.y.nonpara <- function(y.bar, S.y, y.vec) {
L.i <- t(y.bar) %*% solve(S.y) %*% y.vec - 0.5 * t(y.bar) %*% solve(S.y) %*% y.bar
return(as.numeric(L.i))
}
impo.disc <- numeric(Vh)
for (j in 1:Vh) {
impo.disc[j] <- Specdec$values[j] / sum(Specdec$values[1:Vh])
}
print(impo.disc)
ggplot(donnee, aes(x = z1, y = z2, colour = Group)) +
geom_point()
a1 <- Specdec$vectors[,1]
a2 <- Specdec$vectors[,2]
a1
a2
Specdec <- eigen(solve(E) %*% H)
Specdec
Specdec <- eigen(solve(E) %*% H)
Specdec
H <- manov.output$SS$Group
E <- manov.output$SS$Residuals
H
E
setwd("D:/Documents/Trimestre Actuel/STT3010 - Statistique Informatique/Stats_Infos/Devoir")
# Initialisation de l'aiguille, lattes, etc.
aiguille <- 0.2
nlattes <- 6
n <- 0
n_succ <- 0
# On lance 100000 fois l'aiguille
for(i in 1:10^5){
x <- nlattes * runif(2)
theta <- pi * runif(1)
# calcul des deux extrémités de l'aiguille avec la nouvelle longueur
tete <- x - c(cos(theta), sin(theta)) * aiguille / 2
pointe <- x + c(cos(theta), sin(theta)) * aiguille / 2
n <- n + 1
# vérification si l'aiguille traverse une ligne
if(floor(tete[2]) != floor(pointe[2])){
n_succ <- n_succ + 1
}
}
# Calcul de la proportion d'aiguille qui traversent une séparation entre deux lattes
proportion <- n_succ / n
print(proportion)
# On créé 2 vecteurs, un l qui représentent les longueurs d'aiguilles et un estimateurs qui représentent les proportions qui traversent une séparation entre 2 lattes
l = c(0.2, 0.4, 0.6, 0.8, 1)
estimateurs <- numeric(length(l))
# On utilise le code plus haut et on le met dans une boucle qui va créé estimateurs avec les valeurs.
for(k in l){
#initialisation
aiguille <- l[k]
nlattes <- 6
n <- 0
n_succ <- 0
for(i in 1:10^5){
x <- nlattes * runif(2)
theta <- pi * runif(1)
# calcul des deux extrémités de l'aiguille avec la nouvelle longueur
tete <- x - c(cos(theta), sin(theta)) * aiguille / 2
pointe <- x + c(cos(theta), sin(theta)) * aiguille / 2
n <- n + 1
# Vérification si l'aiguille traverse une ligne
if(floor(tete[2]) != floor(pointe[2])){
n_succ <- n_succ + 1
}
}
estimateurs[k] <- n_succ / n
}
l <- c(0.2, 0.4, 0.6, 0.8, 1) # Exemple de longueurs
estimateurs <- rep(0,5) # Initialisation du vecteur pour stocker les résultats
for(k in 1:length(l)){
# Utilisation de la longueur d'aiguille actuelle
aiguille <- l[k]
nlattes <- 6
n <- 0
n_succ <- 0
for(i in 1:10^5){
x <- nlattes*runif(2)
theta <- pi*runif(1)
# Calcul des deux extrémités de l'aiguille avec la longueur actuelle
tete <- x - c(cos(theta), sin(theta)) * aiguille / 2
pointe <- x + c(cos(theta), sin(theta)) * aiguille / 2
n <- n+1
# Vérification si l'aiguille traverse une ligne
if( floor(tete[2]) != floor(pointe[2]) ){
n_succ <- n_succ + 1
}
}
# Stockage de l'estimateur pour la longueur d'aiguille actuelle
estimateurs[k] <- n_succ / n
}
for(k in 1:length(l)){
# Utilisation de la longueur d'aiguille actuelle
aiguille <- l[k]
nlattes <- 6
n <- 0
n_succ <- 0
for(i in 1:10^5){
x <- nlattes*runif(2)
theta <- pi*runif(1)
# Calcul des deux extrémités de l'aiguille avec la longueur actuelle
tete <- x - c(cos(theta), sin(theta)) * aiguille / 2
pointe <- x + c(cos(theta), sin(theta)) * aiguille / 2
n <- n+1
# Vérification si l'aiguille traverse une ligne
if( floor(tete[2]) != floor(pointe[2]) ){
n_succ <- n_succ + 1
}
}
# Stockage de l'estimateur pour la longueur d'aiguille actuelle
estimateurs[k] <- n_succ / n
}
l = c(0.2,0.4,0.6,0.8,1)
estimateurs <- numeric(length(l))
# Définition des longueurs d'aiguilles à tester
# l <- c(0.2, 0.4, 0.6, 0.8, 1) # Exemple de longueurs
#estimateurs <- rep(0,5) # Initialisation du vecteur pour stocker les résultats
for(k in 1:length(l)){
# Utilisation de la longueur d'aiguille actuelle
aiguille <- l[k]
nlattes <- 6
n <- 0
n_succ <- 0
for(i in 1:10^5){
x <- nlattes*runif(2)
theta <- pi*runif(1)
# Calcul des deux extrémités de l'aiguille avec la longueur actuelle
tete <- x - c(cos(theta), sin(theta)) * aiguille / 2
pointe <- x + c(cos(theta), sin(theta)) * aiguille / 2
n <- n+1
# Vérification si l'aiguille traverse une ligne
if( floor(tete[2]) != floor(pointe[2]) ){
n_succ <- n_succ + 1
}
}
# Stockage de l'estimateur pour la longueur d'aiguille actuelle
estimateurs[k] <- n_succ / n
}
l = c(0.2,0.4,0.6,0.8,1)
estimateurs <- numeric(length(l))
for(k in 1:length(l)){
# Utilisation de la longueur d'aiguille actuelle
aiguille <- l[k]
nlattes <- 6
n <- 0
n_succ <- 0
for(i in 1:10^5){
x <- nlattes*runif(2)
theta <- pi*runif(1)
# Calcul des deux extrémités de l'aiguille avec la longueur actuelle
tete <- x - c(cos(theta), sin(theta)) * aiguille / 2
pointe <- x + c(cos(theta), sin(theta)) * aiguille / 2
n <- n+1
# Vérification si l'aiguille traverse une ligne
if( floor(tete[2]) != floor(pointe[2]) ){
n_succ <- n_succ + 1
}
}
# Stockage de l'estimateur pour la longueur d'aiguille actuelle
estimateurs[k] <- n_succ / n
}
plot(l, estimateurs, xlim = c(0,1), ylim = c(0,1))
estimateurs
pi
estimateurs/l
2/pi
2/pi
estimateurs/l
lm(estimateurs ~ l)
summary(lm(estimateurs ~ l))
estimateurs/l - 2/pi
estimateurs/l - 2/pi*l
estimateurs - 2/pi*l
estimateurs/l
2/pi *l - estimateurs
